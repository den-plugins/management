<%  @from = (Date.today - 4.weeks).monday %>
<%  @to = (Date.today - 1.week).monday  %>

<%  user_list = (@users.size > 0)? "time_entries.user_id in (#{@users.collect(&:id).join(',')}) and" : "" %>
<%  project_list = (@projects.size > 0)? "time_entries.project_id in (#{@projects.collect(&:id).join(',')}) and" : "" %>
<%  bounded_time_entries_billable = TimeEntry.find(:all,
                                :conditions => ["#{user_list} #{project_list} spent_on between ? and ? and issues.acctg_type = (select id from enumerations where name = 'Billable')",
                                @from, @to],
                                :include => [:project],
                                :joins => [:issue] )%>
<%  bounded_time_entries_billable.each{|v| v.billable = true }  %>
<%  bounded_time_entries_non_billable = TimeEntry.find(:all,
                                :conditions => ["#{user_list} #{project_list} spent_on between ? and ? and issues.acctg_type = (select id from enumerations where name = 'Non-billable')",
                                @from, @to],
                                :include => [:project],
                                :joins => [:issue]) %>
<%  bounded_time_entries_non_billable.each{|v| v.billable = false } %>
<%  time_entries = TimeEntry.find(:all,
                                :conditions => ["#{user_list} spent_on between ? and ?",
                                @from, @to] ) %>
<%  @time_log_summary = [] %>

<%  project_ids = @projects.collect(&:id)   %>
<%  @users.each do |usr|  %>
<%      b = bounded_time_entries_billable.select{|v| v.user_id == usr.id } %>
<%      nb = bounded_time_entries_non_billable.select{|v| v.user_id == usr.id } %>
<%      x = Hash.new %>

<%      x[:id] = usr.id %>
<%      x[:location] = usr.location %>
<%      x[:name] = usr.name %>
<%      x[:skill] = usr.skill %>
<%      x[:entries] = b + nb    %>
<%      x[:total_hours] = time_entries.select{|v| v.user_id == usr.id }.collect(&:hours).compact.sum %>
<%      x[:billable_hours] = b.collect(&:hours).compact.sum %>
<%      x[:non_billable_hours] = nb.collect(&:hours).compact.sum %>
<%      x[:forecasted_hours_on_selected] = usr.total_expected(@from, @to) %>
<%      x[:total_hours_on_selected] = x[:billable_hours] + x[:non_billable_hours]   %>
<%      @time_log_summary.push(x)  %>
<%  end   %>


<% with_complete_logs = compute_percentage_utilization(@time_log_summary, @from, @to) %>

<script type="text/javascript">
  var data = [['complete', <%= with_complete_logs.to_json %>], ['incomplete', <%= (100.0 - with_complete_logs).to_json %>]];
  var plot1 = jQuery.jqplot('time_logging_chart', [data], {
    seriesDefaults: {
      seriesColors: [ "#6295cd", "#fc787b"],
      renderer: jQuery.jqplot.PieRenderer,
      rendererOptions: {showDataLabels: true, highlightMouseOver: false, textColor: "#000" }
    },
    legend: { show: true, location: 'e'}
  });
</script>
